library(caret)
dat=iris
head(dat)
train_control <- trainControl(method="cv", number=10)
knn_fit <- train(Species ~., data=dat, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
print(paste0("Accuracy: ",knn_fit$results[row.names(knn_fit$bestTune),]$Accuracy, " (k=", knn_fit$bestTune[[1]], ")"))
head(dat)
print(knn_fit)
set.seed(1234)
set.seed(1234)
knn_fit <- train(Species ~., data=dat, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
print(paste0("Accuracy: ",knn_fit$results[row.names(knn_fit$bestTune),]$Accuracy, " (k=", knn_fit$bestTune[[1]], ")"))
library(pastecs)
library(ggplot2)
library(caret)
corrFiles <- list.files("M:/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt", full.names = TRUE)
corrFileNames <- list.files("M:/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt")
autoCorr <- do.call(cbind, lapply(corrFiles, read.csv, header=FALSE))
corrFiles <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt", full.names = TRUE)
corrFileNames <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt")
autoCorr <- do.call(cbind, lapply(corrFiles, read.csv, header=FALSE))
colnames(autoCorr) <- corrFileNames
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
corrFileID <- sapply(strsplit(corrFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorr) <- corrFileID
rownames(exp_Data) <- exp_Data$Sample.Number
autoCorr_transpose <- data.frame(t(autoCorr))
exp_Data$Autocorrelation <- autoCorr_transpose[match(row.names(exp_Data),row.names(autoCorr_transpose)),c(1:256)]
turningPoints <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation[y,])))
exp_Data$Auto.Turning.Points <- turningPoints
firstTurn <- lapply(1:135, function(y) exp_Data$Auto.Turning.Points[[y]]$tppos[[1]])
exp_Data$Auto.First.Turn <- unlist(firstTurn)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Auto.First.Turn, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) +
xlab("Bijel?") + ylab("Position of first autcorrelation turning point")
peakDepth <- lapply(1:135, function(y) exp_Data$Autocorrelation[[y,exp_Data$Auto.Turning.Points[[y]]$tppos[[2]]]]-exp_Data$Autocorrelation[[y,exp_Data$Auto.Turning.Points[[y]]$tppos[[1]]]])
exp_Data$Auto.Peak.Depth <- unlist(peakDepth)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Auto.Peak.Depth, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) +
xlab("Bijel?") + ylab("Depth of first autocorrelation peak/trough")
radFiles <- list.files("M:/PhD/BijelData/Batch_II_full_resolution_ED_images/Profiles", pattern=".txt", full.names = TRUE)
radFileNames <- list.files("M:/PhD/BijelData/Batch_II_full_resolution_ED_images/Profiles", pattern=".txt")
radProf_data <- do.call(cbind, lapply(radFiles, read.csv, header=FALSE))
colnames(radProf_data) <- radFileNames
radFiles <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Profiles", pattern=".txt", full.names = TRUE)
radFileNames <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Profiles", pattern=".txt")
radProf_data <- do.call(cbind, lapply(radFiles, read.csv, header=FALSE))
colnames(radProf_data) <- radFileNames
radFileID <- sapply(strsplit(radFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(radProf_data) <- radFileID
rownames(exp_Data) <- exp_Data$Sample.Number
radProf_data_transpose <- data.frame(t(radProf_data))
exp_Data$Radial.Profile <- radProf_data_transpose[match(row.names(exp_Data),row.names(radProf_data_transpose)),c(1:256)]
#samples <- c(1:135)
r <- c(1:256)
y <- exp_Data$Radial.Profile[2:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[2:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Rad.Line.Gradients <- unlist(lineGradients)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Rad.Line.Gradients, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) +
xlab("Bijel?") + ylab("Gradient of first 20 points of radial profile")
avVal <- lapply(1:135, function(n) mean(unlist(exp_Data$Radial.Profile[n,21:40])))
exp_Data$Average.21_40 <- unlist(avVal)
library(pastecs)
library(ggplot2)
library(caret)
corrFiles <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt", full.names = TRUE)
corrFileNames <- list.files("/Volumes/PhD/BijelData/Batch_II_full_resolution_ED_images/Autocorrelation", pattern=".txt")
autoCorr <- do.call(cbind, lapply(corrFiles, read.csv, header=FALSE))
colnames(autoCorr) <- corrFileNames
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
corrFileID <- sapply(strsplit(corrFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorr) <- corrFileID
rownames(exp_Data) <- exp_Data$Sample.Number
autoCorr_transpose <- data.frame(t(autoCorr))
exp_Data$Autocorrelation <- autoCorr_transpose[match(row.names(exp_Data),row.names(autoCorr_transpose)),c(1:256)]
turningPoints <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation[y,])))
exp_Data$Auto.Turning.Points <- turningPoints
firstTurn <- lapply(1:135, function(y) exp_Data$Auto.Turning.Points[[y]]$tppos[[1]])
exp_Data$Auto.First.Turn <- unlist(firstTurn)
exp_Data$Auto.Turn.Num <- length(turningPoints)
datTurn=data.frame(exp_Data$Auto.First.Turn, exp_Data$Auto.Turn.Num, y=as.factor(exp_Data$Bijel))
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
knn_fit_turn <- train(y ~., data=datTurn, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit_turn)
datTurn=data.frame(exp_Data$Auto.First.Turn, exp_Data$Auto.Turn.Num, y=as.factor(exp_Data$Bijel))
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
knn_fit_turn <- train(y ~., data=datTurn, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit_turn)
print(paste0("Accuracy: ",knn_fit_turn$results[row.names(knn_fit_turn$bestTune),]$Accuracy, " (k=", knn_fit_turn$bestTune[[1]], ")"))
datTurn=data.frame(exp_Data$Auto.First.Turn, exp_Data$Auto.Turn.Num, y=as.factor(exp_Data$Bijel))
train_control <- trainControl(method="cv", number=10)
knn_fit_turn <- train(y ~., data=datTurn, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit_turn)
print(paste0("Accuracy: ",knn_fit_turn$results[row.names(knn_fit_turn$bestTune),]$Accuracy, " (k=", knn_fit_turn$bestTune[[1]], ")"))
exp_Data$Auto.Turning.Points[["99ii"]]
exp_Data$Auto.Turning.Points["99ii"]
exp_Data$Auto.Turning.Points
exp_Data$Auto.Turning.Points["99ii",]
exp_Data["99ii",]
exp_Data["99ii",]$Auto.Turning.Points
exp_Data["99ii",]$Auto.Turning.Points$tppos
unlist(exp_Data["99ii",]$Auto.Turning.Points)$tppos
unlist(exp_Data["99ii",]$Auto.Turning.Points)
exp_Data["99ii",]$Auto.Turning.Points
test=exp_Data["99ii",]$Auto.Turning.Points
test
test$tppos
test=unlist(test)
test
test$tppos
test=exp_Data["99ii",]$Auto.Turning.Points
test
test=exp_Data[["99ii",]]$Auto.Turning.Points
test=exp_Data["99ii",]$Auto.Turning.Points
test
turnpoints(unlist(exp_Data$Autocorrelation["99ii",]))
turnpoints(unlist(exp_Data$Autocorrelation["99ii",]))$tppos
turnpoints(unlist(exp_Data$Autocorrelation["100i",]))$tppos
library(caret)
dat=iris
head(dat)
train_control <- trainControl(method="cv", number=10)
set.seed(1234)
knn_fit <- train(Species ~., data=dat, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
print(paste0("Accuracy: ",knn_fit$results[row.names(knn_fit$bestTune),]$Accuracy, " (k=", knn_fit$bestTune[[1]], ")"))
dat1=data.frame(dat$Sepal.Width, dat$Species)
set.seed(1234)
knn_fit <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
head(dat1)
dat1=data.frame(Sepal.Width=dat$Sepal.Width, Species=dat$Species)
head(dat1)
set.seed(1234)
knn_fit <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
knn_fit1 <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit1)
print(paste0("Accuracy: ",knn_fit1$results[row.names(knn_fit1$bestTune),]$Accuracy, " (k=", knn_fit1$bestTune[[1]], ")"))
source('~/Git/bijelID/python_comp.R', echo=TRUE)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
smp_size <- floor(0.67 * nrow(dat))
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
dat=iris
dat_train <- dat[train_ind]
dat_train <- dat[train_ind,]
dat_test <- dat[-train_ind,]
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
set.seed(1234)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
set.seed(1234)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
knn_plain <- train(Species ~., data=dat, method="knn")
print(paste0("Accuracy: ",knn_plain$results[row.names(knn_plain$bestTune),]$Accuracy, " (k=", knn_plain$bestTune[[1]], ")"))
head(dat_train)
dat[18]
dat[18,]
