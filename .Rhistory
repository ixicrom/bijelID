test=exp_Data["99ii",]$Auto.Turning.Points
test
test$tppos
test=unlist(test)
test
test$tppos
test=exp_Data["99ii",]$Auto.Turning.Points
test
test=exp_Data[["99ii",]]$Auto.Turning.Points
test=exp_Data["99ii",]$Auto.Turning.Points
test
turnpoints(unlist(exp_Data$Autocorrelation["99ii",]))
turnpoints(unlist(exp_Data$Autocorrelation["99ii",]))$tppos
turnpoints(unlist(exp_Data$Autocorrelation["100i",]))$tppos
library(caret)
dat=iris
head(dat)
train_control <- trainControl(method="cv", number=10)
set.seed(1234)
knn_fit <- train(Species ~., data=dat, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
print(paste0("Accuracy: ",knn_fit$results[row.names(knn_fit$bestTune),]$Accuracy, " (k=", knn_fit$bestTune[[1]], ")"))
dat1=data.frame(dat$Sepal.Width, dat$Species)
set.seed(1234)
knn_fit <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit)
plot(knn_fit)
head(dat1)
dat1=data.frame(Sepal.Width=dat$Sepal.Width, Species=dat$Species)
head(dat1)
set.seed(1234)
knn_fit <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
knn_fit1 <- train(Species ~., data=dat1, method="knn", trControl=train_control, tuneLength=34)
print(knn_fit1)
print(paste0("Accuracy: ",knn_fit1$results[row.names(knn_fit1$bestTune),]$Accuracy, " (k=", knn_fit1$bestTune[[1]], ")"))
source('~/Git/bijelID/python_comp.R', echo=TRUE)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
smp_size <- floor(0.67 * nrow(dat))
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
dat=iris
dat_train <- dat[train_ind]
dat_train <- dat[train_ind,]
dat_test <- dat[-train_ind,]
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
set.seed(1234)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
set.seed(1234)
train_ind <- sample(seq_len(nrow(dat)), size=smp_size)
train_ind
knn_plain <- train(Species ~., data=dat, method="knn")
print(paste0("Accuracy: ",knn_plain$results[row.names(knn_plain$bestTune),]$Accuracy, " (k=", knn_plain$bestTune[[1]], ")"))
head(dat_train)
dat[18]
dat[18,]
source('~/Git/bijelID/2019-05-09_liq&particle_final.R', echo=TRUE)
source('~/Git/bijelID/2019-05-09_liq&particle_final.R', echo=TRUE)
source('~/Git/bijelID/2019-05-09_liq&particle_final.R', echo=TRUE)
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
warnings()
head(exp_Data$Autocorrelation.Liquid)
head(autoCorrLiq)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
View(exp_Data)
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFiles
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
partFileNames
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
autoCorrPart
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
autoCorrPart_transpose
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
exp_Data$Autocorrelation.Particle
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFiles
liqFileNames <- list.files("M:/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
liqFileNames
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
warnings()
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
liqFileNames
colnames(autoCorrLiq) <- liqFileNames
autoCorrLiq
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
liqFileID
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
autoCorrLiq_transpose
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
exp_Data$Autocorrelation.Liquid
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.20, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 20 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.10, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 10 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Liquid.First.Turn, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Position") + ggtitle("Position of first turning points of liquid ACF (pixels)")
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
print(logRegFitParticle)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl)
print("KNN liquid channel:")
print(knnFitLiquid)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
print("Logistic regression both channels:")
print(logRegFitBoth)
set.seed(1234)
knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl)
print("KNN both channels:")
print(knnFitBoth)
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
print(logRegFitParticle)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl, tunelength=30)
print("KNN liquid channel:")
print(knnFitLiquid)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
print("Logistic regression both channels:")
print(logRegFitBoth)
set.seed(1234)
knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl, tunelength=30)
print("KNN both channels:")
print(knnFitBoth)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
print(logRegFitParticle)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN liquid channel:")
print(knnFitLiquid)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
print("Logistic regression both channels:")
print(logRegFitBoth)
set.seed(1234)
knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN both channels:")
print(knnFitBoth)
print(logRegFitParticle)
knnFitLiqu
print(knnFitLiquid)
print(logRegFitBoth)
print(knnFitBoth)
set.seed(1234)
dTreeFitBoth <- train(Bijel~., data=dat, method="rpart", trControl=trCtrl)
print("Decision tree both channels:")
print(dTreeFitBoth)
set.seed(1234)
svmFitBoth <- train(Bijel~., data=dat, method="svm", trControl=trCtrl)
print("SVM both channels:")
print(svmFitBoth)
set.seed(1234)
svmFitBoth <- train(Bijel~., data=dat, method="svmLinear", trControl=trCtrl)
print("SVM both channels:")
print(svmFitBoth)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
#colnames(autoCorrPart) <- partFileNames
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.20, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 20 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.10, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 10 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Liquid.First.Turn, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Position") + ggtitle("Position of first turning points of liquid ACF (pixels)")
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
print(logRegFitParticle)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN liquid channel:")
print(knnFitLiquid)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
print("Logistic regression both channels:")
print(logRegFitBoth)
set.seed(1234)
knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN both channels:")
print(knnFitBoth)
set.seed(1234)
dTreeFitBoth <- train(Bijel~., data=dat, method="rpart", trControl=trCtrl)
print("Decision tree both channels:")
print(dTreeFitBoth)
set.seed(1234)
svmFitBoth <- train(Bijel~., data=dat, method="svmLinear", trControl=trCtrl)
print("SVM both channels:")
print(svmFitBoth)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
#colnames(autoCorrPart) <- partFileNames
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.20, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 20 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.10, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 10 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Liquid.First.Turn, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Position") + ggtitle("Position of first turning points of liquid ACF (pixels)")
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
print(logRegFitParticle)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN liquid channel:")
print(knnFitLiquid)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
print("Logistic regression both channels:")
print(logRegFitBoth)
set.seed(1234)
knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN both channels:")
print(knnFitBoth)
set.seed(1234)
dTreeFitBoth <- train(Bijel~., data=dat, method="rpart", trControl=trCtrl)
print("Decision tree both channels:")
print(dTreeFitBoth)
set.seed(1234)
svmFitBoth <- train(Bijel~., data=dat, method="svmLinear", trControl=trCtrl)
print("SVM both channels:")
print(svmFitBoth)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
print(logRegFitBoth)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
warnings()
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^1)+I(Particle.Gradients.20^1), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
print(train(Bijel~Liquid.First.Turn+Particle.Gradients.10+Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^1)+I(Particle.Gradients.20^1), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt2 <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt2)
set.seed(1234)
logRegFitAlt3 <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt3)
set.seed(1234)
logRegFit2var <- train(Bijel~Liquid.First.Turn+Particle.Gradients.10, data=dat, method="glm", trControl=trCtrl)
print(logRegFit2var)
set.seed(1234)
logRegFit2varB <- train(Bijel~Liquid.First.Turn+Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print(logRegFit2varB)
set.seed(1234)
knnFit2var <- train(Bijel~Liquid.First.Turn+Particle.Gradients.10, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print(knnFit2var)
set.seed(1234)
knnFit2varB <- train(Bijel~Liquid.First.Turn+Particle.Gradients.20, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print(knnFit2varB)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
#colnames(autoCorrPart) <- partFileNames
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
logRegFitBoth
logRegFitBoth$finalModel
logRegFitBoth$bestTune
logRegFitBoth$modelInfo
logRegFitBoth$terms
summary(logRegFitBoth)
logRegFitBoth
logRegFitBoth$results
logRegFitBoth$results$Accuracy
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
hist(unlist(errors), xlim=c(0,0.5))
abline(v=errorReal)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:10)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=errorReal)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:10)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=0.8544811)
hist(unlist(errors), xlim=c(0,0.5))
abline(v=1-0.8544811)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=1-0.8544811)
