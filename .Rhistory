knnFitBoth <- train(Bijel~., data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN both channels:")
print(knnFitBoth)
set.seed(1234)
dTreeFitBoth <- train(Bijel~., data=dat, method="rpart", trControl=trCtrl)
print("Decision tree both channels:")
print(dTreeFitBoth)
set.seed(1234)
svmFitBoth <- train(Bijel~., data=dat, method="svmLinear", trControl=trCtrl)
print("SVM both channels:")
print(svmFitBoth)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
print(logRegFitBoth)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
warnings()
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^1)+I(Particle.Gradients.20^1), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
print(train(Bijel~Liquid.First.Turn+Particle.Gradients.10+Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^1)+I(Particle.Gradients.20^1), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt)
set.seed(1234)
logRegFitAlt2 <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^2)+I(Particle.Gradients.20^2), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt2)
set.seed(1234)
logRegFitAlt3 <- train(Bijel~Liquid.First.Turn+I(Particle.Gradients.10^3)+I(Particle.Gradients.20^3), data=dat, method="glm", trControl=trCtrl)
print(logRegFitAlt3)
set.seed(1234)
logRegFit2var <- train(Bijel~Liquid.First.Turn+Particle.Gradients.10, data=dat, method="glm", trControl=trCtrl)
print(logRegFit2var)
set.seed(1234)
logRegFit2varB <- train(Bijel~Liquid.First.Turn+Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print(logRegFit2varB)
set.seed(1234)
knnFit2var <- train(Bijel~Liquid.First.Turn+Particle.Gradients.10, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print(knnFit2var)
set.seed(1234)
knnFit2varB <- train(Bijel~Liquid.First.Turn+Particle.Gradients.20, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print(knnFit2varB)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
#colnames(autoCorrPart) <- partFileNames
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
logRegFitBoth
logRegFitBoth$finalModel
logRegFitBoth$bestTune
logRegFitBoth$modelInfo
logRegFitBoth$terms
summary(logRegFitBoth)
logRegFitBoth
logRegFitBoth$results
logRegFitBoth$results$Accuracy
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
hist(unlist(errors), xlim=c(0,0.5))
abline(v=errorReal)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:10)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=errorReal)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:10)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=0.8544811)
hist(unlist(errors), xlim=c(0,0.5))
abline(v=1-0.8544811)
attach(exp_Data)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#random bijel labels, 1000 sets
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
hist(unlist(errors), xlim=c(0,0.5))
abline(v=1-0.8544811)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.20, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 20 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
dev.copy(png, 'bj_partGrad20.png')
dev.off()
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Particle.Gradients.10, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Gradient") + ggtitle("Gradient of first 10 points of particle ACF")+theme(plot.title = element_text(hjust = 0.5))
dev.copy(png, 'bj_partGrad10.png')
dev.off()
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
ggplot(exp_Data, aes(x=as.factor(Bijel), y=Liquid.First.Turn, fill=Bijel)) + geom_boxplot(alpha=0.3) + geom_jitter(alpha=0.5) + xlab("Bijel?") + ylab("Position") + ggtitle("Position of first turning points of liquid ACF (pixels)")
dev.copy(png, 'bj_liqTurn.png')
dev.off()
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
knnFitLiquid <- train(Bijel ~ Liquid.First.Turn, data=dat, method="knn", trControl=trCtrl, tuneLength=30)
print("KNN liquid channel:")
plot(knnFitLiquid)
dev.copy(png, 'knn_xVal_liq.png')
dev.off()
png('results_liq.png', width=800, height=400)
plot(sort(Liquid.First.Turn), rep(0, each=135), col=Bijel, pch=16, yaxt='n', xlab="Position of first turning point in Liquid Channel ACF", ylab="")
points(sort(Liquid.First.Turn), rep(0, each=135), col=predict(knnFitLiquid), pch=1, cex=1.5)
legend("topright", legend=c("Bijel", "Non-bijel", "Pred bijel", "Pred non-bijel"), pch=c(16,16,1,1), col=c("red", "black", "red", "black"))
dev.off()
set.seed(1234)
logRegFitParticle <- train(Bijel ~ Particle.Gradients.10 + Particle.Gradients.20, data=dat, method="glm", trControl=trCtrl)
print("Logistic regression particle channel:")
png('results_part.png')
plot(Particle.Gradients.10, Particle.Gradients.20, col=Bijel, pch=16)
points(Particle.Gradients.10, Particle.Gradients.20, col=predict(logRegFitParticle), pch=1, cex=1.5)
legend("topleft", legend=c("Bijel", "Non-bijel", "Pred bijel", "Pred non-bijel"), pch=c(16,16,1,1), col=c("red", "black", "red", "black"))
dev.off()
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
#currently I can only figure out how to do this as separate plots for real and predicted, might have to switch to Python for plotting this one
library(plot3D)
scatter3d(Particle.Gradients.10, Particle.Gradients.20, Liquid.First.Turn, col=Bijel, grid=FALSE, surface=FALSE)
scatter3d(Particle.Gradients.10, Particle.Gradients.20, Liquid.First.Turn, groups=predict(logRegFitBoth), grid=FALSE, surface=FALSE)
#future: try sec 4.1 of https://cran.r-project.org/web/packages/plot3D/vignettes/plot3D.pdf
resultDat <- data.frame(Bijel, liqPred=predict(knnFitLiquid), partPred=predict(logRegFitParticle, type="prob")[[2]], bothPred=predict(logRegFitBoth, type="prob")[[2]])
library(plotROC)
ggplot(resultDat, aes(truth=Bijel, pred=bothPred)) + geom_roc(n.cuts=0)
bijelLabs <- replicate(1000, sample(c("y","n"), 135, replace=TRUE, prob=c(.68, .32)))
bijelLabs[,1]
errors <- vector("list", 1000)
for(i in c(1:1000)){
dat=data.frame(Liquid.First.Turn, Particle.Gradients.20, Particle.Gradients.10, y=bijelLabs[,i])
set.seed(1234)
fit <- train(y ~., data=dat, method="glm", trControl=trCtrl)
errors[i] <- 1-fit$results$Accuracy
}
errorDF = data.frame(c(1:1000), data.frame(unlist(errors)))
ggplot(data=errorDF, aes(errorDF$unlist.errors.)) + geom_histogram() + geom_vline(aes(xintercept=0.1455189, linetype="Model error"), show.legend= TRUE, color="purple") + xlab("Error for randomly labelled samples") + ylab("Frequency") + theme(legend.title = element_blank())
dev.copy(png, 'random_hist.png')
dev.off()
table(predict(knnFitLiquid), Bijel)
bijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt")
noBijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt")
bijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt")
noBijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt")
x=c(1:256)
xScaled=x*640.17/512
plot(xScaled, bijelACF)
bijelACF
bijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt")
noBijelACF <- read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt")
x=c(1:255)
xScaled=x*640.17/512
plot(xScaled, bijelACF)
xScaled
x
plot(xScaled, bijelACF)
length(xScaled)
length(bijelACF)
bijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt"))
noBijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt"))
x=c(1:255)
xScaled=x*640.17/512
plot(xScaled, bijelACF)
lines(xScaled, noBijelACF)
plot(xScaled, bijelACF, type="l")
plot(xScaled, bijelACF, type="l")
lines(xScaled, noBijelACF)
plot(xScaled, bijelACF, type="l", lwd=2, col="red")
lines(xScaled, noBijelACF, lwd=2)
bijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt"))
noBijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt"))
x=c(1:255)
xScaled=x*640.17/512
plot(xScaled, bijelACF, type="l", lwd=2, col="red")
lines(xScaled, noBijelACF, lwd=2)
legend("topright", legend = c("Bijel", "Non-bijel"))
bijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt"))
noBijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt"))
x=c(1:255)
xScaled=x*640.17/512
plot(xScaled, bijelACF, type="l", lwd=2, col="red")
lines(xScaled, noBijelACF, lwd=2)
legend("topright", legend = c("Bijel", "Non-bijel"), col=c("red", "black"))
bijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/52ii_Image23.tif_autoCorr_channel0.txt"))
noBijelACF <- unlist(read.csv("/Volumes/PhD/BijelData/LiquidChannel/autoCorr/54i_Image9.tif_autoCorr_channel0.txt"))
x=c(1:255)
xScaled=x*640.17/512
plot(xScaled, bijelACF, type="l", lwd=2, col="red")
lines(xScaled, noBijelACF, lwd=2)
legend("topright", legend = c("Bijel", "Non-bijel"), col=c("red", "black"), lwd=2)
plot(xScaled, bijelACF, type="l", lwd=2, col="red", xlab = "r (μm)", ylab="Autocorrelation Function")
lines(xScaled, noBijelACF, lwd=2)
legend("topright", legend = c("Bijel", "Non-bijel"), col=c("red", "black"), lwd=2)
#logistic regression plot
library(popbio)
install.packages("popbio")
#logistic regression plot
library(popbio)
#logistic regression plot
predict(logRegFitBoth, type="prob")
#logistic regression plot
predict(logRegFitBoth, type="response")
#logistic regression plot
predict(logRegFitBoth, type="raw")
#logistic regression plot
predict(logRegFitBoth, type="prob")
#logistic regression plot
table(predict(logRegFitBoth), Bijel)
#logistic regression plot
table(predict(logRegFitParticle), Bijel)
#logistic regression plot
plot(ifelse(Bijel=="y", 1,0), predict(logRegFitBoth, type="prob"))
#logistic regression plot
plot(ifelse(Bijel=="y", 1,0), predict(logRegFitBoth, type="prob")[[2]])
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(predict(logRegFitBoth, type="prob")[[2]])
lines(predict(logRegFitBoth, type="prob")[[2]],predict(logRegFitBoth, type="prob")[[2]])
lines(predict(logRegFitBoth, type="prob")[[2]], c(1:135)/135)
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135)
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
?predict
predict(logRegFitBoth, data=c(1:135), type="prob")
plot(predict(logRegFitBoth, data=c(1:135), type="prob")[[2]], predict(logRegFitBoth, type="prob")[[2]])
plot(predict(logRegFitBoth, data=c(1:135), type="prob"))
points(ifelse(Bijel=="y", 1,0))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob")[[2]], predict(logRegFitBoth, type="prob")[[1]])
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(predict(logRegFitBoth, type="prob")[[2]], predict(logRegFitBoth, type="prob")[[1]])
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(predict(logRegFitBoth, type="prob")[[2]])
points(predict(logRegFitBoth, type="prob")[[2]])
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
points(predict(logRegFitBoth, type="prob")[[2]], c(1:135)/135)
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
points(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135)
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135)
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135)
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:1000)/1000)
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135)
lines(sort(predict(logRegFitBoth, type="prob")[[2]]), Particle.Gradients.10)
plot((sort(predict(logRegFitBoth, type="prob")[[2]]), Particle.Gradients.10)
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), Particle.Gradients.10)
plot(predict(logRegFitBoth, type="prob")[[2]], Particle.Gradients.10)
plot(predict(logRegFitBoth, type="prob")[[2]], Particle.Gradients.20)
plot(predict(logRegFitBoth, type="prob")[[2]], Liquid.First.Turn)
plot(Liquid.First.Turn, predict(logRegFitBoth, type="prob")[[2]])
plot(predict(logRegFitBoth, type="prob")[[2]])
plot(sort(predict(logRegFitBoth, type="prob")[[2]]))
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), type="l")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135, type="l")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135, type="l", lwd=4, col="red")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
points(c(1:135)/135, ifelse(Bijel=="y", 1,0))
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135, type="l", lwd=4, col="red")
points(c(1:135)/135, ifelse(Bijel=="y", 1,0))
predict(logRegFitBoth, type="prob")[[2]]
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135, type="l", lwd=4, col="red")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
plot(sort(predict(logRegFitBoth, type="prob")[[2]]), c(1:135)/135, type="l", lwd=4, col="red", xlab="Predicted bijel probability", ylab="True bijel probability")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), type="hist", xlab="Predicted bijel probability", ylab="True bijel probability")
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
logi.hist.plot(Liquid.First.Turn, ifelse(Bijel=="y", 1,0), type="hist")
logi.hist.plot(Liquid.First.Turn, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist")
logi.hist.plot(Liquid.First.Turn, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist", col="gray")
logi.hist.plot(Particle.Gradients.10, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist", col="gray")
logi.hist.plot(Particle.Gradients.20, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist", col="gray")
logRegFitBoth
logRegFitBoth$modelInfo
logRegFitBoth$bestTune
logRegFitBoth$modelInfo
logRegFitBoth$results
logRegFitBoth$finalModel
plot((Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), ifelse(Bijel=="y", 1,0))
plot(predict(logRegFitBoth, type="prob"))
plot((Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), c(1:135))
plot(sort(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), c(1:135))
plot(sort(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), predict(logRegFitBoth))
plot(sort(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), predict(logRegFitBoth, type = "prob"))
plot(exp(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02), predict(logRegFitBoth, type = "prob"))
Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02
exp(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02)
plot(exp(Particle.Gradients.20*2.135e+03+Particle.Gradients.10*-1.382e+03+Liquid.First.Turn *-5.608e-02))
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
logi.hist.plot(Particle.Gradients.20, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist", col="gray")
set.seed(1234)
logRegEG <- train(Bijel ~ Liquid.First.Turn, data=dat, method="glm", trControl=trCtrl)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
logRegEG <- train(Bijel ~ Liquid.First.Turn, data=dat, method="glm", trControl=trCtrl)
library(pastecs)
library(caret)
exp_Data <- read.csv("/Volumes/PhD/BijelData/Bijel_Data_Cleaner_ToRead.csv", na.strings = "?")
exp_Data$Sample.Number <- as.character(exp_Data$Sample.Number)
rownames(exp_Data) <- exp_Data$Sample.Number
partFiles <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt", full.names = TRUE)
partFileNames <- list.files("/Volumes/PhD/BijelData/ParticleChannel/autoCorr", pattern=".txt")
autoCorrPart <- do.call(cbind, lapply(partFiles, read.csv, header=FALSE))
partFileID <- sapply(strsplit(partFileNames,"_"), `[`,1) #`[` is a function that takes the subset of x, the input to this function is x (strsplit...) and the element of x that I want, ie the 1st one
colnames(autoCorrPart) <- partFileID
autoCorrPart_transpose <- data.frame(t(autoCorrPart))
exp_Data$Autocorrelation.Particle <- autoCorrPart_transpose[match(row.names(exp_Data),row.names(autoCorrPart_transpose)),c(1:256)]
liqFiles <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt", full.names = TRUE)
liqFileNames <- list.files("/Volumes/PhD/BijelData/LiquidChannel/autoCorr", pattern = ".txt")
autoCorrLiq <- do.call(cbind, lapply(liqFiles, read.csv, header=FALSE))
colnames(autoCorrLiq) <- liqFileNames
liqFileID <- sapply(strsplit(liqFileNames,"_"), `[`,1)
colnames(autoCorrLiq) <- liqFileID
autoCorrLiq_transpose <- data.frame(t(autoCorrLiq))
exp_Data$Autocorrelation.Liquid <- autoCorrLiq_transpose[match(row.names(exp_Data),row.names(autoCorrLiq_transpose)),c(1:256)]
#gradients of particle channel ACF
r <- c(1:256)
y <- exp_Data$Autocorrelation.Particle[1:20]
lineFits <- lapply(1:135, function(n) lm(unlist(y[n,]) ~ r[1:20]))
lineCoeffs <- lapply(lineFits, function(m) m$coefficients)
lineGradients <- lapply (1:135, function(p) unname(lineCoeffs[[p]][2]))
exp_Data$Particle.Gradients.20 <- unlist(lineGradients)
y2 <- exp_Data$Autocorrelation.Particle[1:10]
lineFits2 <- lapply(1:135, function(n) lm(unlist(y2[n,]) ~ r[1:10]))
lineCoeffs2 <- lapply(lineFits2, function(m) m$coefficients)
lineGradients2 <- lapply (1:135, function(p) unname(lineCoeffs2[[p]][2]))
exp_Data$Particle.Gradients.10 <- unlist(lineGradients2)
#turning point of liquid channel ACF
liquidTurns <- lapply(1:135, function(y) turnpoints(unlist(exp_Data$Autocorrelation.Liquid[y,])))
firstTurn <- lapply(1:135, function(y) liquidTurns[[y]]$tppos[1])
exp_Data$Liquid.First.Turn <- unlist(firstTurn)
attach(exp_Data)
dat=data.frame(Particle.Gradients.20, Particle.Gradients.10, Liquid.First.Turn, Bijel)
set.seed(1234)
trCtrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1234)
logRegFitBoth <- train(Bijel~., data=dat, method="glm", trControl=trCtrl)
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
#logistic regression plot
plot(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), xlab="Predicted bijel probability", ylab="True bijel probability")
logi.hist.plot(Particle.Gradients.20, ifelse(Bijel=="y", 1,0), boxp=FALSE, type="hist", col="gray", )
plot(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0))
plot(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), pch=2)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), pch=2)
plot(predict(logRegFitBoth, type="prob")[[1]], predict(logRegFitBoth, type="prob")[[2]])
plot(predict(logRegFitBoth, type="prob")[[1]], predict(logRegFitBoth, type="prob")[[2]], xlab="y", ylab="n")
lines(predict(logRegFitBoth, type="prob"))
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), pch=2)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[2]], ifelse(Bijel=="y", 1,0), pch=2)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[1]], ifelse(Bijel=="y", 1,0), pch=2)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[1]], ifelse(Bijel=="y", 1,0), pch=2)
abline(h=0.5)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[1]], ifelse(Bijel=="y", 1,0), pch=2)
abline(v=0.5)
plot(predict(logRegFitBoth, type="prob"))
lines(predict(logRegFitBoth, type="prob"))
points(predict(logRegFitBoth, type="prob")[[1]], ifelse(Bijel=="y", 1,0), pch=2)
abline(v=0.5)
abline(h=0.5)
